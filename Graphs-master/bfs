#include<iostream>
#include<list>
#include<queue>
#include<map>
using namespace std;

template<typename T>
class graph
{
    
    map <T,list<T> >adjlist;
    public:
    graph()
    {

    }

    void addvertex(T i,T f,bool bidr=true)
    void addvertex(T i,T f,bool bidr=true)
    {
        adjlist[i].push_back(f);
        if (bidr)
        adjlist [f].push_back(i);
    }
    void bfs (T strt)
    {
        queue<T> q;
        map <T, bool> done;

        q.push(strt);
        done[strt]=true;
        while (!q.empty())
        {
            T key=q.front();
            cout<<key<<"->";
            q.pop();
        
        //for the neighbours of the current key find out the places which r not visited
          for (auto neighbour:adjlist[key])
          {
              if (!done[neighbour])
                {
              q.push(neighbour);
              done[neighbour]=true;
                }
          }
          }
    }

};
  
int main ()
{
    graph<string> g;
    g.addvertex ("putin","modi",false);
    g.addvertex ("putin","trump",false);
    g.addvertex ("putin","pope",false);
    g.addvertex ("prabhu","modi",false);
    g.addvertex ("modi","trump",true);
    g.addvertex ("modi","yogi",true);
    g.addvertex ("yogi","prabhu",false);
    g.addvertex ("yogi","modi",true);
  //  g.addvertex ("trump","modi",true);
    g.bfs ("modi");
    return 0;
}
