#include<bits/stdc++.h>
using namespace std;
template <typename T> 
class graph
{
    map <T,list<T> > adjlist;
    public: 
    graph ()
    {
        
    }
    void addvertex (int i,int f,bool bidr=true)
    {
        adjlist[i].push_back(f);
        if (bidr)
        adjlist[f].push_back (i);
    }
    void print ()
    {
        for (auto i:adjlist)
        {
            cout<<i.first<<"->";
            for (T entry: i.second)
            {
                cout<<entry<<" ";
            }
            cout<<endl;
        }
    }
    void dfstraverse (T node,map <T,bool> &visited )
    {
        
        visited[node]=true;
        cout<<node<<" ";
        for (auto neighbour:adjlist[node])
        {
        if (!visited[neighbour])
            {
                dfstraverse (neighbour,visited);
        
            }
       }
    }
    void dfs (T strt)
    {
        map <T,bool> visited;
       dfstraverse (strt,visited);
        
    }
};
int main ()
{
    graph <int> g;
    g.addvertex(0,4);
    g.addvertex(0,1);
    g.addvertex(1,2);
    g.addvertex(2,3);
    g.addvertex(3,4);
    g.addvertex(3,5);
    g.addvertex(2,4);
    g.dfs(0);
}
