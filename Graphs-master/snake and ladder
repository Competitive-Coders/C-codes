
#include<map>
#include<bits/stdc++.h>
using namespace std;

template<typename T>
class graph
{

    map <T,list<T> >adjlist;
    public:
    graph()
    {

    }

    void addvertex(T i,T f,bool bidr=true)
     {
        adjlist[i].push_back(f);
        if (bidr)
        adjlist [f].push_back(i);
    }
    void print ()
    {
        //iterate over maps
        for (auto i:adjlist)
        {
            cout<<i.first<<"->";
        for (T entry:i.second)
        {
            cout<<entry<<" ";
        }
            cout<<endl;
             }
    }/*
    void bfs (T strt)
    {
        queue<T> q;
        map <T, bool> done;


        q.push(strt);
        done[strt]=true;
        while (!q.empty())
        {
            T key=q.front();
            cout<<key<<"->";
            q.pop();
        
        //for the neighbours of the current key find out the places which r not visited
          for (auto neighbour:adjlist[key])
          {
              if (!done[neighbour])
                {
                  q.push(neighbour);
                  done[neighbour]=true;
                }
          }}
    }*/
    int shortest_path (T strt,T ending)
    {
        queue <T> q;
        map <T ,int > distance;
        map <T,T> parent;
        for (auto i:adjlist)
        {
            distance [i.first]=INT_MAX;
        }
        q.push (strt);
        distance [strt]=0;
        parent [strt]=strt;
        while (!q.empty())
        {
            T key = q.front();
          //  cout<<key;
            q.pop();

        for (T neighbour:adjlist[key])
        {
            if (distance[neighbour]==INT_MAX)
            {
             q.push (neighbour);
             distance[neighbour]=1+distance[key];
             parent[neighbour]=key;
            }

        }
        }
        /*for (auto i:adjlist)
        {
            T key=i.first;
            cout<<"distance of"<<strt<<"from"<<key<<"is"<<distance[key];

        }*/
        T temp=ending;
        while (temp!=strt)
        {
            cout<<temp<<" ";
            temp=parent[temp];
        }
        cout<<strt<<endl;
        return distance[ending];

    }
};
int main ()
{
    /*graph<string> g;
    g.addvertex ("putin","modi",false);
    g.addvertex ("putin","trump",false);
    g.addvertex ("putin","pope",false);
    g.addvertex ("prabhu","modi",false);
    g.addvertex ("modi","trump",true);
    g.addvertex ("modi","yogi",true);
    g.addvertex ("yogi","prabhu",false);
   // g.addvertex ("yogi","modi",true);
  //  g.addvertex ("trump","modi",true);
   // g.bfs ("modi");
   // g.print ();
   g.shortest_path(modi);*/
   graph <int> g;
   int board[50]={0};
   board[2]=13 ;
   board[5]= 2;
   board[9]= 8;
   board[18]= 11;
   board[17]= -13;
   board[20]= -14;
   board[24]= -8;
   board[25]= -10;
   board[32]= -2;
   board[34]= -22;
   for (int i=0;i<=36;i++)
   {
       for (int dice=1;dice<=6;dice++)
       {
           int f=i+dice+board[i+dice];
           g.addvertex (i,f,false);
       }
   }
   cout<<"shortest path "<< g.shortest_path(0,36)<<endl;
   return 0;
}
